#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        kha {
            bindings = <&kp LBKT>;
            key-positions = <6 7>;
        };

        hrdsgn {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
        };
    };

    macros {
        dotspace: dotspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT &kp SPACE>;
            label = "DOTSPACE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q                &kp W  &kp E  &kp R         &kp T                                 &kp Y  &kp U          &kp I      &kp O    &kp P
  &hml LEFT_CONTROL A  &kp S  &kp D  &kp F         &kp G                                 &kp H  &kp J          &kp K      &kp L    &hmr RIGHT_CONTROL SEMI
  &hml LEFT_SHIFT Z    &kp X  &kp C  &kp V         &kp B                                 &kp N  &kp M          &kp COMMA  &kp DOT  &hmr RIGHT_SHIFT SLASH
                                     &kp LEFT_ALT  &kp LEFT_GUI  &kp SPACE    &kp ENTER  &mo 1  &kp RIGHT_ALT
            >;

            display-name = "Base";
        };

        nav {
            bindings = <
  &kp ESC           &kp N3  &kp N2  &kp N1  &kp NUMBER_0                        &kp TAB  &kp BACKSPACE   &kp UP_ARROW    &none            &kp LC(LG(T))
  &kp LEFT_CONTROL  &kp N6  &kp N5  &kp N4  &kp LA(Y)                           &none    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LG(LC(E))
  &kp LEFT_SHIFT    &kp N9  &kp N8  &kp N7  &kp LA(PERIOD)                      &none    &kp DELETE      &mo 2           &none            &kp LC(SPACE)
                                    &trans  &trans          &dotspace    &none  &none    &trans
            >;

            display-name = "Navigation";
        };

        adj {
            bindings = <
  &bootloader       &kp F3  &kp F2  &kp F1  &kp F10                       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_CLR
  &kp LEFT_CONTROL  &kp F6  &kp F5  &kp F4  &kp F11                       &out OUT_BLE  &kp C_BRI_DN  &none         &kp C_BRI_UP     &none
  &kp LEFT_SHIFT    &kp F9  &kp F8  &kp F7  &kp F12                       &out OUT_USB  &kp C_VOL_DN  &none         &kp C_VOLUME_UP  &studio_unlock
                                    &trans  &trans   &kp C_MUTE    &none  &none         &trans
            >;

            display-name = "Adjust";
        };
    };
};
